// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package computepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CalculatorAPIClient is the client API for CalculatorAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorAPIClient interface {
	Divide(ctx context.Context, in *DivideRequest, opts ...grpc.CallOption) (*DivideResponse, error)
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
}

type calculatorAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorAPIClient(cc grpc.ClientConnInterface) CalculatorAPIClient {
	return &calculatorAPIClient{cc}
}

func (c *calculatorAPIClient) Divide(ctx context.Context, in *DivideRequest, opts ...grpc.CallOption) (*DivideResponse, error) {
	out := new(DivideResponse)
	err := c.cc.Invoke(ctx, "/calculator.CalculatorAPI/Divide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorAPIClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/calculator.CalculatorAPI/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorAPIServer is the server API for CalculatorAPI service.
// All implementations must embed UnimplementedCalculatorAPIServer
// for forward compatibility
type CalculatorAPIServer interface {
	Divide(context.Context, *DivideRequest) (*DivideResponse, error)
	Sum(context.Context, *SumRequest) (*SumResponse, error)
	mustEmbedUnimplementedCalculatorAPIServer()
}

// UnimplementedCalculatorAPIServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorAPIServer struct {
}

func (UnimplementedCalculatorAPIServer) Divide(context.Context, *DivideRequest) (*DivideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Divide not implemented")
}
func (UnimplementedCalculatorAPIServer) Sum(context.Context, *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedCalculatorAPIServer) mustEmbedUnimplementedCalculatorAPIServer() {}

// UnsafeCalculatorAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorAPIServer will
// result in compilation errors.
type UnsafeCalculatorAPIServer interface {
	mustEmbedUnimplementedCalculatorAPIServer()
}

func RegisterCalculatorAPIServer(s grpc.ServiceRegistrar, srv CalculatorAPIServer) {
	s.RegisterService(&_CalculatorAPI_serviceDesc, srv)
}

func _CalculatorAPI_Divide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorAPIServer).Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.CalculatorAPI/Divide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorAPIServer).Divide(ctx, req.(*DivideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorAPI_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorAPIServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.CalculatorAPI/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorAPIServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CalculatorAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.CalculatorAPI",
	HandlerType: (*CalculatorAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Divide",
			Handler:    _CalculatorAPI_Divide_Handler,
		},
		{
			MethodName: "Sum",
			Handler:    _CalculatorAPI_Sum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "computepb/compute.proto",
}
