// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bookpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BookSearchClient is the client API for BookSearch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookSearchClient interface {
	BookSearchByTitle(ctx context.Context, in *BookSearchByTitleRequest, opts ...grpc.CallOption) (*BookSearchResponse, error)
	BookSearchByAuthor(ctx context.Context, in *BookSearchByAuthorRequest, opts ...grpc.CallOption) (*BookSearchResponse, error)
}

type bookSearchClient struct {
	cc grpc.ClientConnInterface
}

func NewBookSearchClient(cc grpc.ClientConnInterface) BookSearchClient {
	return &bookSearchClient{cc}
}

func (c *bookSearchClient) BookSearchByTitle(ctx context.Context, in *BookSearchByTitleRequest, opts ...grpc.CallOption) (*BookSearchResponse, error) {
	out := new(BookSearchResponse)
	err := c.cc.Invoke(ctx, "/book.BookSearch/bookSearchByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookSearchClient) BookSearchByAuthor(ctx context.Context, in *BookSearchByAuthorRequest, opts ...grpc.CallOption) (*BookSearchResponse, error) {
	out := new(BookSearchResponse)
	err := c.cc.Invoke(ctx, "/book.BookSearch/bookSearchByAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookSearchServer is the server API for BookSearch service.
// All implementations must embed UnimplementedBookSearchServer
// for forward compatibility
type BookSearchServer interface {
	BookSearchByTitle(context.Context, *BookSearchByTitleRequest) (*BookSearchResponse, error)
	BookSearchByAuthor(context.Context, *BookSearchByAuthorRequest) (*BookSearchResponse, error)
	mustEmbedUnimplementedBookSearchServer()
}

// UnimplementedBookSearchServer must be embedded to have forward compatible implementations.
type UnimplementedBookSearchServer struct {
}

func (UnimplementedBookSearchServer) BookSearchByTitle(context.Context, *BookSearchByTitleRequest) (*BookSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookSearchByTitle not implemented")
}
func (UnimplementedBookSearchServer) BookSearchByAuthor(context.Context, *BookSearchByAuthorRequest) (*BookSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookSearchByAuthor not implemented")
}
func (UnimplementedBookSearchServer) mustEmbedUnimplementedBookSearchServer() {}

// UnsafeBookSearchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookSearchServer will
// result in compilation errors.
type UnsafeBookSearchServer interface {
	mustEmbedUnimplementedBookSearchServer()
}

func RegisterBookSearchServer(s grpc.ServiceRegistrar, srv BookSearchServer) {
	s.RegisterService(&_BookSearch_serviceDesc, srv)
}

func _BookSearch_BookSearchByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookSearchByTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookSearchServer).BookSearchByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.BookSearch/bookSearchByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookSearchServer).BookSearchByTitle(ctx, req.(*BookSearchByTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookSearch_BookSearchByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookSearchByAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookSearchServer).BookSearchByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.BookSearch/bookSearchByAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookSearchServer).BookSearchByAuthor(ctx, req.(*BookSearchByAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BookSearch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "book.BookSearch",
	HandlerType: (*BookSearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "bookSearchByTitle",
			Handler:    _BookSearch_BookSearchByTitle_Handler,
		},
		{
			MethodName: "bookSearchByAuthor",
			Handler:    _BookSearch_BookSearchByAuthor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bookpb/book.proto",
}
